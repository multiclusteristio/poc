# ---
# - name: Configure Vault PKI engines and save Root CA to host
#   hosts: localhost
#   gather_facts: false
#   vars:
#     vault_command: "kubectl exec -n vault -it vault-0 -- vault"
#     root_ca: "./east/root_ca.json"
#     certs_path: "/tmp/certs"
#     root_pki_path: "pki_root"
#     intermediate_pki_prefix: "pki_int"
#     vault_host: "http://vault.vault.svc.cluster.local:8200"

#   tasks:
#     # Step 1: Create a directory for storing certificates locally
#     - name: Create a directory for storing certificates
#       file:
#         path: "{{ certs_path }}"
#         state: directory
#         mode: "0755"

#     # Step 2: Enable the Root PKI engine in Vault
#     - name: Enable the Root PKI engine in Vault
#       command: >
#         {{ vault_command }} secrets enable -path={{ root_pki_path }} pki

#     # Step 3: Generate the Root CA certificate
#     - name: Generate the Root CA certificate
#       command: >
#         {{ vault_command }} write -field=certificate {{ root_pki_path }}/root/generate/internal
#         common_name="mydomain.com" ttl=87600h
#       register: root_cert

#     # Step 4: Save the Root CA certificate to file
#     - name: Save the Root CA certificate to host system
#       copy:
#         content: "{{ root_cert.stdout }}"
#         dest: "{{ certs_path }}/CA_cert.crt"
#         mode: "0644"

#     # Step 5: Configure the URL paths for the Root PKI engine
#     - name: Configure the URL paths for the Root PKI engine
#       command: >
#         {{ vault_command }} write {{ root_pki_path }}/config/urls
#         issuing_certificates="{{ vault_host }}/v1/{{ root_pki_path }}/ca"
#         crl_distribution_points="{{ vault_host }}/v1/{{ root_pki_path }}/crl"

#     # Step 6: Enable the Intermediate PKI engine
#     - name: Enable Intermediate PKI engine for the cluster
#       command: >
#         {{ vault_command }} secrets enable -path={{ intermediate_pki_prefix }}_{{ inventory_hostname }} pki

#     # Step 7: Set max lease TTL for Intermediate PKI
#     - name: Set max lease TTL for Intermediate PKI
#       command: >
#         {{ vault_command }} secrets tune -max-lease-ttl=43800h {{ intermediate_pki_prefix }}_{{ inventory_hostname }}

#     # Step 8: Generate Intermediate CA certificate signing request (CSR)
#     - name: Generate Intermediate CSR
#       command: >
#         {{ vault_command }} write -format=json {{ intermediate_pki_prefix }}_{{ inventory_hostname }}/intermediate/generate/internal
#         common_name="mydomain.com intermediate {{ inventory_hostname }}"
#       register: intermediate_csr

#     # Step 9: Save the Intermediate CSR to file
#     - name: Save the Intermediate CSR to file
#       copy:
#         content: "{{ intermediate_csr.stdout | from_json | json_query('data.csr') }}"
#         dest: "{{ certs_path }}/pki_intermediate_{{ inventory_hostname }}.csr"
#         mode: "0644"

#     # Step 10: Sign the Intermediate CSR using Root CA
#     - name: Sign the Intermediate CSR using Root CA
#       command: >
#         {{ vault_command }} write -format=json {{ root_pki_path }}/root/sign-intermediate
#         csr=@{{ certs_path }}/pki_intermediate_{{ inventory_hostname }}.csr
#         format=pem ttl="43800h"
#       register: signed_intermediate_cert

#     # Step 11: Save the signed Intermediate certificate to file
#     - name: Save the signed Intermediate certificate
#       copy:
#         content: "{{ signed_intermediate_cert.stdout | from_json | json_query('data.certificate') }}"
#         dest: "{{ certs_path }}/intermediate_{{ inventory_hostname }}.cert.pem"
#         mode: "0644"

#     # Step 12: Combine the Intermediate certificate and Root certificate into a chain
#     - name: Combine Intermediate and Root Certificates
#       shell: >
#         cat {{ certs_path }}/intermediate_{{ inventory_hostname }}.cert.pem {{ certs_path }}/CA_cert.crt
#         > {{ certs_path }}/intermediate_{{ inventory_hostname }}.chain.pem
#       delegate_to: localhost

#     # Step 13: Upload the signed Intermediate certificate chain to Vault
#     - name: Upload signed Intermediate certificate chain to Vault
#       command: >
#         {{ vault_command }} write {{ intermediate_pki_prefix }}_{{ inventory_hostname }}/intermediate/set-signed
#         certificate=@{{ certs_path }}/intermediate_{{ inventory_hostname }}.chain.pem

#     # Step 14: Create a role for Istio
#     - name: Create Istio role in Intermediate PKI
#       command: >
#         {{ vault_command }} write {{ intermediate_pki_prefix }}_{{ inventory_hostname }}/roles/istio-ca-{{ inventory_hostname }}
#         allowed_domains=istio-ca
#         allow_any_name=true
#         enforce_hostnames=false
#         require_cn=false
#         allowed_uri_sans="spiffe://*"
#         max_ttl=72h
