- name: Set variables
  set_fact:
    vault_root_token: "root"            # Vault root token for dev mode
    vault_node_port: "31000"            # NodePort for Vault service
    vault_namespace: "vault"            # Vault namespace
    auh_kubecontext: "kind-auh"         # Kube context for 'auh' cluster
    dxb_kubecontext: "kind-dxb"         # Kube context for 'dxb' cluster

- name: Create the Vault namespace on 'auh' cluster
  command: kubectl create namespace vault
  ignore_errors: true  # Ignore error if namespace already exists
  environment:
    KUBECONFIG: /tmp/kind-auh.kubeconfig

- name: Check if Vault pod is already running on 'auh' cluster
  command: kubectl get pods vault-0 -n vault --no-headers
  register: vault_pod_status_auh
  ignore_errors: true
  environment:
    KUBECONFIG: /tmp/kind-auh.kubeconfig

- name: Add hashicorp Helm repository on 'auh' cluster
  command: helm repo add hashicorp https://helm.releases.hashicorp.com
  when: vault_pod_status_auh.rc != 0
  environment:
    KUBECONFIG: /tmp/kind-auh.kubeconfig

- name: Update Helm repositories on 'auh' cluster
  command: helm repo update
  when: vault_pod_status_auh.rc != 0
  environment:
    KUBECONFIG: /tmp/kind-auh.kubeconfig

- name: Install Vault using Helm on 'auh' cluster if not installed
  command: >
    helm install vault hashicorp/vault --namespace vault
    --set server.ha.enabled=false
    --set server.dev.enabled=true
    --set server.dataStorage.enabled=false
    --set server.service.type=NodePort
    --set "server.service.nodePort={{ vault_node_port }}"
    --set ingress.enabled=false
    --set "server.dev.rootToken={{ vault_root_token }}"
  when: vault_pod_status_auh.rc != 0
  environment:
    KUBECONFIG: /tmp/kind-auh.kubeconfig

- name: Wait for Vault pod to be running on 'auh' cluster
  shell: |
    kubectl get pods vault-0 -n vault -o jsonpath='{.status.phase}'
  register: pod_status_auh
  until: pod_status_auh.stdout == "Running"
  retries: 30  # Maximum retries
  delay: 5  # Delay between retries (in seconds)
  failed_when: pod_status_auh.stdout != "Running"  # Fail if the pod is not running after retries
  environment:
    KUBECONFIG: /tmp/kind-auh.kubeconfig

- name: Print Vault Pod status on 'auh' cluster
  debug:
    var: pod_status_auh.stdout