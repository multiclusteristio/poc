---

- name: Set variables
  set_fact:
    vault_address: "http://localhost:8200"  # Vault server address       
    vault_token: "root"           # Vault token        
     
- name: Ensure Istio system namespace exists
  shell: |
    kubectl get namespace istio-system || kubectl create namespace istio-system
  environment:
    KUBECONFIG: "{{ cluster.kubeconfig }}"
  register: namespace_check
  changed_when: "'created' in namespace_check.stdout or 'created' in namespace_check.stderr"
  ignore_errors: true

- name: Create istio cert issuer resources for Vault access
  command: >
    kubectl apply -f ./issuer/issuer-sa.yaml \
    -f ./issuer/issuer-sa-token.yaml \
    -f ./issuer/issuer-crb.yaml
  environment:
    KUBECONFIG: "{{ cluster.kubeconfig }}"
  ignore_errors: true

- name: Enable Kubernetes auth method in Vault
  shell: |
    VAULT_ADDR={{ vault_address }} VAULT_TOKEN={{ vault_token }} \  
    vault auth enable --path={{ cluster.name }} kubernetes
  ignore_errors: true

- name: Get Kubernetes API server host from the cluster
  shell: |
    kubectl config view --raw --minify --flatten -o jsonpath='{.clusters[0].cluster.server}'
  environment:
    KUBECONFIG: "{{ cluster.kubeconfig }}"    
  register: k8s_host  

- name: Get Kubernetes CA certificate from the cluster
  shell: |
    kubectl config view --raw --minify --flatten -o jsonpath='{.clusters[0].cluster.certificate-authority-data}' | base64 --decode    
  environment:
    KUBECONFIG: "{{ cluster.kubeconfig }}"
  register: k8s_ca

- name: Get Service Account token for istio cert issuer
  shell: |
    kubectl get secret issuer-token-lmzpj -n istio-system -o jsonpath='{.data.token}' | base64 --decode
  environment:
    KUBECONFIG: "{{ cluster.kubeconfig }}"
  register: sa_token

- name: Configure Kubernetes auth method for cluster
  shell: |
    VAULT_ADDR={{ vault_address }} VAULT_TOKEN={{ vault_token }} \  
    vault write auth/{{ cluster.name }}/config \
      token_reviewer_jwt="{{ sa_token.stdout }}" \
      kubernetes_host="{{ k8s_host.stdout }}" \
      kubernetes_ca_cert="{{ k8s_ca.stdout }}" \
      issuer="https://kubernetes.default.svc.cluster.local"

- name: Create PKI policy
  shell: |
    VAULT_ADDR={{ vault_address }} VAULT_TOKEN={{ vault_token }} \  
    vault policy write pki - <<EOF
    path "pki*" {
      capabilities = ["create", "read", "update", "delete", "list"]
    }
    EOF
  ignore_errors: true

- name: Create Vault role for istio
  shell: |
    VAULT_ADDR={{ vault_address }} VAULT_TOKEN={{ vault_token }} \  
    vault write auth/{{ cluster.name }}/role/issuer \
      bound_service_account_names=issuer \
      bound_service_account_namespaces=istio-system \
      policies=pki \
      ttl=1h

- name: Print Service Account token
  debug:
    msg: "Cluster: {{ cluster.name }}, SA Token: {{ sa_token.stdout }}"

- name: Print Kubernetes CA Certificate
  debug:
    msg: "Cluster: {{ cluster.name }}, Kubernetes CA: {{ k8s_ca.stdout }}"
